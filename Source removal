#include <stdio.h>

#define MAX 100

int adj[MAX][MAX];      // Adjacency matrix
int indegree[MAX];      // Indegree of each vertex
int queue[MAX];         // Queue for source removal
int front = 0, rear = -1;

void enqueue(int v) {
    queue[++rear] = v;
}

int dequeue() {
    return queue[front++];
}

int isEmpty() {
    return front > rear;
}

void topologicalSort(int n) {
    // Step 1: Calculate indegree of all vertices
    for (int i = 0; i < n; i++) {
        indegree[i] = 0;
        for (int j = 0; j < n; j++) {
            if (adj[j][i] == 1)
                indegree[i]++;
        }
    }

    // Step 2: Enqueue vertices with indegree 0
    for (int i = 0; i < n; i++) {
        if (indegree[i] == 0)
            enqueue(i);
    }

    printf("Topological Sort Order:\n");

    // Step 3: Process queue
    int count = 0;
    while (!isEmpty()) {
        int v = dequeue();
        printf("%d ", v);
        count++;

        // Decrease indegree of neighbors
        for (int i = 0; i < n; i++) {
            if (adj[v][i] == 1) {
                indegree[i]--;
                if (indegree[i] == 0)
                    enqueue(i);
            }
        }
    }

    // If count != n, there is a cycle
    if (count != n)
        printf("\nGraph has a cycle. Topological sorting not possible.\n");
    else
        printf("\n");
}

int main() {
    int n, e;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);

    // Initialize adjacency matrix
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            adj[i][j] = 0;

    printf("Enter edges (source destination):\n");
    for (int i = 0; i < e; i++) {
        int u, v;
        scanf("%d%d", &u, &v);
        adj[u][v] = 1;
    }

    topologicalSort(n);

    return 0;
}
