#include <stdio.h>

#define MAX 100
#define INF 99999

int parent[MAX];

int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}

int union_set(int i, int j) {
    if (i != j) {
        parent[j] = i;
        return 1;
    }
    return 0;
}

int main() {
    int cost[MAX][MAX];
    int n;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix (0 if no edge):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = INF;  // No edge
        }

    int edges = 0, minCost = 0;

    printf("\nEdges in the Minimum Spanning Tree:\n");
    while (edges < n - 1) {
        int min = INF, u = -1, v = -1;

        // Find the edge with minimum cost
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }

        int uSet = find(u);
        int vSet = find(v);

        if (union_set(uSet, vSet)) {
            printf("Edge %d: (%d - %d) cost = %d\n", edges + 1, u, v, min);
            minCost += min;
            edges++;
        }

        cost[u][v] = cost[v][u] = INF; // Mark edge as used
    }

    printf("\nMinimum Cost of Spanning Tree = %d\n", minCost);

    return 0;
}
