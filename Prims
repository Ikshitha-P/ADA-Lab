#include <stdio.h>

#define MAX 100
#define INF 99999

void primMST(int graph[MAX][MAX], int n) {
    int selected[MAX] = {0};
    int no_of_edges = 0;
    int min, x, y;
    int total_cost = 0;

    selected[0] = 1;  // Start from vertex 0

    printf("Edges in the Minimum Spanning Tree:\n");

    while (no_of_edges < n - 1) {
        min = INF;
        x = 0;
        y = 0;

        for (int i = 0; i < n; i++) {
            if (selected[i]) {
                for (int j = 0; j < n; j++) {
                    if (!selected[j] && graph[i][j]) {
                        if (graph[i][j] < min) {
                            min = graph[i][j];
                            x = i;
                            y = j;
                        }
                    }
                }
            }
        }

        printf("Edge %d: (%d - %d) cost: %d\n", no_of_edges + 1, x, y, graph[x][y]);
        total_cost += graph[x][y];
        selected[y] = 1;
        no_of_edges++;
    }

    printf("Total cost of Minimum Spanning Tree: %d\n", total_cost);
}

int main() {
    int graph[MAX][MAX];
    int n;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (enter 0 for no edge, use only positive weights):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    primMST(graph, n);

    return 0;
}
